(define (composition f g)
        (lambda (x) (f (g x)))
)

(define (repeated f n)
    (define (dfs g x n)
            (if (= n 1)
                (g x)
                (dfs (composition g f) x (- n 1))
            )
    )
    (lambda (x) (dfs f x n))
)

(define (inc x)
    (+ x 1)
)
(define (average lhs rhs)
        (/ (+ lhs rhs) 2)
)
(define (square x)
        (* x x)
)
(define tolerance 0.00001)

(define (goodEnough? lhs rhs)
        (< (abs (- lhs rhs)) tolerance)
)

(define (iterativeImprove goodEnough? improve)
        (define (dfs guess)
            (let ( (next (improve guess)) )
                 (if (goodEnough? guess next)
                     next
                     (dfs next)
                 )
            )
        )
        (lambda (x) (dfs x))
)
(define (improveFix guess)
    (f guess))

(define (fixedPoint f first-guess)
    ((iterativeImprove goodEnough? improveFix) first-guess)
)

(define (sqrt x)
    (define (improveSqrt guess)
            (average guess (/ x guess))
    )
    ((iterativeImprove goodEnough? improveSqrt) 1)
)


; (display (fixedPoint cos 1.0) )
(display (sqrt 3.0) )

(exit)